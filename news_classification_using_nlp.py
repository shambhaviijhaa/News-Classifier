# -*- coding: utf-8 -*-
"""News Classification using NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qouUP5gAFqN-IXfVyp3LwPiSCEW3d337
"""

pip install nltk

import nltk

nltk.download('punkt')

import pandas as pd

fake=pd.read_csv("Fake.csv")
genuine=pd.read_csv("True.csv")

display(fake.info())
display(genuine.info())

display(fake.head())
display(genuine.head())

display(fake.subject.value_counts())
print('\n')
display(genuine.subject.value_counts())

fake['target']=0
genuine['target']=1

display(fake.head())

display(genuine.head())

data=pd.concat([fake, genuine],axis=0)

data=data.reset_index(drop=True)

data=data.drop(['subject','date','title'], axis=1)

print(data.columns)
print(data)

"""# TOKENIZATION"""

from nltk.tokenize import word_tokenize
data['text']=data['text'].apply(word_tokenize)

print(data.head(10))

"""# STEMMING"""

from nltk.stem.snowball import SnowballStemmer
porter=SnowballStemmer("english",ignore_stopwords=False)

def stem_it(text):
    return [porter.stem(word) for word in text]

data['text']=data['text'].apply(stem_it)

print(data.head(10))

"""# stopword removal"""

'''from nltk.corpus import stopwords
nltk.download('stopwords')
print(stopwords.words('english'))'''

def stop_it(t):
    dt=[word for word in t if len(word)>2]
    return dt

data['text']=data['text'].apply(stop_it)

print(data['text'].head(10))

data['text']=data['text'].apply(' '.join)

"""# splitting up data"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(data['text'],data['target'],test_size=0.25)
display(x_train.head())
print('\n')
display(y_train.head())

"""# vectorization"""

import sklearn

from sklearn.feature_extraction.text import TfidfVectorizer
my_tfidf=TfidfVectorizer(max_df=0.7)
tfidf_train=my_tfidf.fit_transform(x_train)
tfidf_test=my_tfidf.transform(x_test)

print(tfidf_train)

"""# Logistic Regression"""

import sklearn

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model_1= LogisticRegression(max_iter=900)
model_1.fit(tfidf_train,y_train)
pred_1=model_1.predict(tfidf_test)
cri=accuracy_score(y_test,pred_1)
print(cri*100)

"""# PassiveAggressiveClassifier"""

from sklearn.linear_model import PassiveAggressiveClassifier
model=PassiveAggressiveClassifier(max_iter=50)
model.fit(tfidf_train,y_train)

y_pred=model.predict(tfidf_test)
accscore=accuracy_score(y_test,y_pred)
print('The Accuracy of prediction is ',accscore*100)

